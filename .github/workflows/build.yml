name: XO Game Web Packager

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  package-web-game:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full unzip python2.7 lua5.3 zip

      - name: Find and extract .7z archive
        run: |
          GAME_7Z=$(ls *.7z | head -n 1)
          if [ -z "$GAME_7Z" ]; then
            echo "No se encontró archivo .7z"
            exit 1
          fi
          mkdir extracted_7z
          7z x "$GAME_7Z" -oextracted_7z

      - name: Find and extract .xo file from .7z
        run: |
          XO_FILE=$(find extracted_7z -type f -name "*.xo" | head -n 1)
          if [ -z "$XO_FILE" ]; then
            echo "No se encontró archivo .xo dentro del .7z"
            exit 1
          fi
          mkdir extracted_xo
          unzip "$XO_FILE" -d extracted_xo

      - name: Detect game type and main script
        id: detect
        run: |
          if ls extracted_xo/*.py 1> /dev/null 2>&1; then
            MAIN_FILE=$(ls extracted_xo/*.py | head -n 1)
            echo "type=python" >> $GITHUB_OUTPUT
            echo "main_file=$(basename $MAIN_FILE)" >> $GITHUB_OUTPUT
          elif ls extracted_xo/*.lua 1> /dev/null 2>&1; then
            MAIN_FILE=$(ls extracted_xo/*.lua | head -n 1)
            echo "type=lua" >> $GITHUB_OUTPUT
            echo "main_file=$(basename $MAIN_FILE)" >> $GITHUB_OUTPUT
          else
            echo "type=unknown" >> $GITHUB_OUTPUT

      - name: Prepare web game directory
        run: |
          mkdir web_game
          cp -r extracted_xo/* web_game/

      - name: Generate index.html for Python game
        if: steps.detect.outputs.type == 'python'
        run: |
          cat <<EOF > web_game/index.html
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="UTF-8">
            <title>XO Game - Python Web</title>
            <script src="https://cdn.jsdelivr.net/pyodide/v0.24.0/full/pyodide.js"></script>
          </head>
          <body>
            <div id="output"></div>
            <script>
              async function main() {
                let pyodide = await loadPyodide();
                let code = await (await fetch("${{ steps.detect.outputs.main_file }}")).text();
                let result = await pyodide.runPythonAsync(code);
                document.getElementById("output").innerText = result;
              }
              main();
            </script>
          </body>
          </html>
          EOF

      - name: Generate index.html for Lua game
        if: steps.detect.outputs.type == 'lua'
        run: |
          cat <<EOF > web_game/index.html
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="UTF-8">
            <title>XO Game - Lua Web</title>
            <script src="https://unpkg.com/fengari-web/dist/fengari-web.js"></script>
          </head>
          <body>
            <div id="output"></div>
            <script type="application/lua">
          EOF
          cat "web_game/${{ steps.detect.outputs.main_file }}" >> web_game/index.html
          echo "</script></body></html>" >> web_game/index.html

      - name: Fallback for unknown type
        if: steps.detect.outputs.type == 'unknown'
        run: |
          echo "Tipo de juego no soportado (solo Python 2.7 o Lua)"
          exit 1

      - name: Package web game as zip
        run: |
          cd web_game
          zip -9 -r ../web_game.zip .
        shell: bash

      - name: Upload web game zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: web_game
          path: web_game.zip
